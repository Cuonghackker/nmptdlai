import pandas as pd 
import seaborn as sns
df = pd.read_csv('dulieuxettuyendaihoc.csv',
                 header=0,delimiter=','
                 ,encoding='utf-8')
df = df[['GT','DT','KV','KT','M1',
         'M2','M3',
         'NGAYTHI','DINHHUONGNGHENGHIEP']]

#Phần 1: Thao tác cơ bản
df.info()
df.rename(columns={'NGAYTHI':'NT',
                   'DINHHUONGNGHENGHIEP':'NGHE'}, 
                   inplace=True)
df.head(5)
df.dropna(how='all', inplace=True)
df.drop_duplicates(inplace=True)
import matplotlib.pyplot as plt
plt.figure(figsize=(10,6))
sns.heatmap(df.isna().transpose(),cmap='YlGnBu',
            cbar_kws={'label':'Dữ liệu thiếu'})
plt.savefig('missingdata.png', dpi=100)
plt.show()
df['DT'].fillna('KINH', inplace=True)
df['M1'].fillna(df['M1'].mean(), inplace=True)
df['M2'].fillna(df['M2'].median(), inplace=True)
df['M3'].fillna(0, inplace=True)

# Phần 2: Kỹ thuật Feature Engineering
df['TBM'] = (df['M1']+df['M2']+df['M3'])/3
df
df.loc[df['TBM'] < 5.0, 'XL'] = 'FAIL'

df.loc[(df['TBM'] >= 5.0) & 
       (df['TBM'] < 7.0), 'XL'] = 'FAIR'

df.loc[(df['TBM'] >= 7.0) & 
       (df['TBM'] < 9.0), 'XL'] = 'GOOD'

df.loc[df['TBM'] >= 9.0, 'XL'] = 'EXCEL'
df
dict_map = {
    'A1':'G1', 'C':'G3', 'D1': 'G3', 'A': 'G1', 'B': 'G2'
}
df['NHOM'] = df['KT'].map(dict_map)
df
def fplus(x,y):
    if (x == 'G1' or x == 'G2') and (y >= 4.0):
        return 1.0
    else:
        return 0.0

df['PLUS'] = list(map(fplus,df['NHOM'],df['TBM']))
df

# Sinh viên tự làm tạo cột MaxM = giá trị lớn nhất của (M1,M2,M3)

# Phần 3: Trực quan hóa dữ liệu
sns.countplot(x='GT', data=df)
plt.show()

'''
Sinh viên tự làm tương tự cho các cột DT
--> Dựa trên biểu đồ DT cho biết tại sao 
    ta không phân tích theo phân nhóm DT

Sinh viên tự làm tương tự cho các cột NHOM
--> Dựa trên biểu đồ NHOM 
    hãy cho biết nhóm nào có lượng thí sinh đông nhất 
    và thấp nhất
'''

sns.countplot(x='KT', hue='GT',data=df)
plt.show()

'''
Sinh viên tự làm tương tự cho các nhóm 
biến định tính: (KV,KT)
-->Hãy cho biết khối A có sinh viên khu vực nào đăng ký nhiều nhất
'''

sns.barplot(x='GT', y='M1', data=df, errorbar=None)
plt.show()

'''
Hãy so sánh trung bình điểm M2 theo NHOM
-> Cho biết nhóm thi nào có điểm thi M2 cao nhất
'''

sns.barplot(x='GT', y='M1', hue='KT', data=df, errorbar=None)
plt.show()

sns.barplot(x='GT', y='M1', hue='KT', data=df)
plt.show()

sns.barplot(x='GT', y='M1', hue='KT', data=df, 
            errorbar=None, estimator=max)
plt.show()

import numpy as np
sns.barplot(x='KV', y='M1', hue='KT', 
            data=df, errorbar=None, estimator=np.max)
plt.show()

gb = df.groupby(['KT'])['KT'].agg(['count'])

labels = gb.index # labels = ['A','A1','B','C','D1']
data = list(gb['count']) # data= [49,6,9,14,22]

colors = sns.color_palette('pastel') # Tạo bảng màu

plt.pie(data, labels=labels, colors=colors, 
        autopct='%1.1f%%', shadow=True)

plt.show()

'''
Sinh viên tự viết thống kê tỉ lệ phần trăm cho KV
'''

gb = df.groupby(['KV'])['PLUS'].agg(['sum'])

labels = gb.index
data = list(gb['sum'])

colors = sns.color_palette('pastel') # Tạo bảng màu

plt.pie(data, labels=labels, colors=colors, 
        autopct='%1.1f%%', shadow=True)

plt.show()

sns.lineplot(x='NT', y='M1', data=df)
plt.show()

sns.lineplot(x='NT', y='M1', data=df, estimator=np.max)
plt.show()

sns.lineplot(x='NT', y='M1', hue='GT', 
             data=df, estimator=np.max)
plt.show()

# Phần 4: Phân tích mô tả định lượng - THỐNG KÊ MÔ TẢ

